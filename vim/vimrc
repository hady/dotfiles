" [Vundle]
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim

" Plugins:
call vundle#begin()
Plugin 'gmarik/Vundle.vim' " Vundle (required)
Plugin 'chriskempson/base16-vim' " Base16 Vim
Plugin 'https://github.com/altercation/vim-colors-solarized.git' " Solarized
Plugin 'https://github.com/wincent/Command-T.git' " Command-T
Plugin 'https://github.com/sjbach/lusty.git' " LustyJuggler
Plugin 'https://github.com/msanders/snipmate.vim.git' " snipMate
Plugin 'https://github.com/scrooloose/nerdcommenter.git' " NERDCommenter
Plugin 'https://github.com/vim-scripts/supertab.git' " SuperTab
Plugin 'https://github.com/tpope/vim-fugitive.git' " Fugitive
Plugin 'https://github.com/tpope/vim-surround.git' " Surround
Plugin 'https://github.com/tpope/vim-repeat.git' " Repeat.vim
Plugin 'https://github.com/danro/rename.vim.git' " Rename.vim
Plugin 'https://github.com/davidoc/taskpaper.vim.git' " TaskPaper
Plugin 'https://github.com/dag/vim2hs.git' " vim2hs
call vundle#end()

" [General]
set shell=/bin/bash
set history=100
set undolevels=100
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set hidden

" [Command-Line]
set wildmenu
set wildmode=list:longest
set wildignore=*.swp,*.bak,*.pyc,*.class

" [Visual]
syntax on
filetype plugin indent on
set number " Always show line numbers.
set ruler
set matchtime=5
set showmode
set showcmd
set showmatch " Briefly show matching bracket if visible.
set novisualbell
set noerrorbells
set title
set list " Highlight tabs, trailing whitespace and invisible spaces.
set listchars=tab:>.,trail:.,extends:#,nbsp:.
set guioptions-=T " Hide toolbar.

" [Color Scheme]
if has('gui_running')
  set background=light
else
  set background=dark
endif
colorscheme solarized

" [Text]
set textwidth=0
set nowrap " Don't wrap lines.
set tabstop=2 " A tab is 2 spaces.
set softtabstop=2
set shiftwidth=2 " Number of spaces when using autoindenting.
set shiftround " Use multiple of shiftwidth when indenting with '<' and '>'.
set expandtab
set smarttab " Insert tabs on the start of a line according to shiftwidth, not tabstop.
set autoindent
set smartindent
set copyindent " Copy the previous indentation on autoindenting.
set backspace=indent,eol,start " Allow backspacing over everything.

" General
autocmd BufEnter * lcd %:p:h

" C/C++
let c_syntax_for_h=1
autocmd FileType c,cpp setlocal cindent
autocmd FileType c,cpp setlocal tabstop=3
autocmd FileType c,cpp setlocal shiftwidth=3

" Python
autocmd FileType py setlocal tabstop=4
autocmd FileType py setlocal shiftwidth=4

" CMake
autocmd FileType cmake setlocal tabstop=3
autocmd FileType cmake setlocal shiftwidth=3

" Binary
augroup Binary " vim -b : edit binary using xxd-format.
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END

" [Navigation]
set scrolloff=3 " Maintain more context around the cursor.
nnoremap <C-e> 3<C-e> " Scroll the viewport faster.
nnoremap <C-y> 3<C-y>

" [Search]
set smartcase " Case sensitive when expression contains uppercase...
set ignorecase  " ...case insensitive matching otherwise.
set hlsearch " Highlight search terms...
set incsearch " ...dynamically as they are typed.

" [Keyboard Bindings]
nnoremap Q <nop> " Disable Ex mode binding.
let mapleader="," " Change the mapleader from '\' to ','.

" Quickly edit/reload the vimrc file.
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Clear highlighted searches.
nmap <silent> ,/ :nohlsearch<CR>

" Tab mappings.
nmap <C-t> <Esc>:tabnew<CR>
nmap <C-F4> <Esc>:tabclose<CR>
map <C-Tab> :tabnext<CR>
map <C-S-Tab> :tabprevious<CR>
imap <C-Tab> <Esc>:tabnext<CR>
imap <C-S-Tab> <Esc>:tabprevious<CR>

" Copy & Paste mappings.
nmap <C-S-v> "+gP
imap <C-S-v> <ESC><C-A-v>i
vmap <C-S-c> "+y

" Switch to paste mode.
set pastetoggle=<F2>

" [Mouse Settings]
set mouse=a " Enable the mouse.
set mousemodel=popup " Right mouse button pops up a menu.

" [Menu]
" Add menu items for copying the filename
:amenu .350 &File.Cop&y.&Base\ Name :let @+=expand("%:t")<CR>
:amenu .350 &File.Cop&y.&Dir\ Name :let @+=expand("%:p:h")<CR>
:amenu .350 &File.Cop&y.Full\ &Path :let @+=expand("%:p")<CR>
