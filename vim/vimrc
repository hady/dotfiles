" [vim-plug]
call plug#begin()

Plug 'dense-analysis/ale'
Plug 'ericbn/vim-solarized'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rust-lang/rust.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'

call plug#end()

" [General]

" The below two lines are set by one of the above plugins (I forget which but
" we include them here just in case it's every disabled.
syntax enable
filetype plugin indent on

" [Theme]
set background=dark
set termguicolors  " Required for Solarized.
colorscheme solarized

" [Temporary files]
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set undodir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" [Buffers]
set autochdir  " Automatically change current working dir.
set hidden

" [Command-Line]
set wildmenu
set wildmode=list:longest
set wildignore=*.swp,*.bak,*.pyc,*.class

" [Navigation]
set scrolloff=3  " Maintain more context around the cursor

" [Search]
set smartcase  " Case sensitive when expression contains uppercase...
set ignorecase  " ...case insensitive matching otherwise.
set hlsearch  " Highlight search terms...
set incsearch  " ...dynamically as they are typed.

" [Visual]
set number  " Always show line numbers.
set ruler
set matchtime=5
set showmode
set showcmd
set showmatch  " Briefly show matching bracket if visible.
set visualbell
set noerrorbells
set title
set list  " Highlight tabs, trailing whitespace, and invisible spaces.
set laststatus=2  " Always show a status line.

" [Text]
set textwidth=0
set nowrap  " Don't wrap lines.
set tabstop=2  " A tab is 2 spaces.
set softtabstop=2
set shiftwidth=2  " Number of spaces when using autoindenting.
set shiftround  " Use multiple of shiftwidth when indenting with '<' and '>'.
set expandtab
set smarttab  " Use shiftwidth instead of tabstop when inserting tabs.
set autoindent
set smartindent
set copyindent  " Copy the previous indentation on autoindenting.
set backspace=indent,eol,start  " Allow backspacing over everything.
let &colorcolumn="80,".join(range(120,999),",")

" [CoC]

" Install missing extensions.
let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-git',
      \ 'coc-rust-analyzer',
      \ 'coc-pyright',
      \ ]

" Shorter the updatetime from the default of 4000 ms to reduce delays and
" improve the experience.
set updatetime=300

" Always show the signcolumn. Not doing so would shift the text each time
" diagnostics appear or are resolved.
set signcolumn=yes
"
" Use <CR> to accept a selected completion item or notify coc.nvim to format.
" NOTE: The <C-g>u mapping breaks current undo.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics. Use `:CocDiagnostics` to get all
" diagnostics in the current buffer.
nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

" Code navigation mappings.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Rename symbol mapping.
nmap <leader>rn <Plug>(coc-rename)

" Format selection mapping.
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

" Remap keys for applying code actions at the cursor position.
nmap <leader>ac <Plug>(coc-codeaction-cursor)
" Remap keys for applying code actions that affect whole buffer.
nmap <leader>as <Plug>(coc-codeaction-source)
" Apply the preferred quickfix to fix the diagnostic on the current line.
nmap <leader>qf <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions.
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r <Plug>(coc-codeaction-refactor-selected)

" [rust.vim]
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0
